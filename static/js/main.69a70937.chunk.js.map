{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scroll","handleButton","step","props","images","itemWidth","frameSize","infinite","scrollLength","length","nextScroll","setState","this","animationDuration","endScroll","startScroll","styleForItem","transform","transition","styleForImage","width","widthForView","className","style","classNames","map","image","index","src","alt","type","disabled","onClick","React","Component","App","handleChange","e","target","id","value","htmlFor","onChange","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69a70937.chunk.js","sourcesContent":["/* eslint-disable prefer-const */\nimport classNames from 'classnames';\nimport React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n  step: number\n  frameSize: number\n  itemWidth: number\n  animationDuration: number\n  infinite: boolean\n};\n\ntype State = {\n  scroll: number;\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scroll: 0,\n  };\n\n  handleButton = (step: number) => () => {\n    let {\n      images,\n      itemWidth,\n      frameSize,\n      infinite,\n    } = this.props;\n    let { scroll } = this.state;\n    const scrollLength = itemWidth * (images.length - frameSize);\n    let scrollCount = itemWidth * step;\n    let nextScroll = scroll + scrollCount;\n\n    if (step < 0) {\n      if (nextScroll < 0) {\n        nextScroll = 0;\n      }\n\n      if (scroll === 0 && infinite) {\n        nextScroll = scrollLength;\n      }\n    }\n\n    if (step > 0) {\n      if (nextScroll > scrollLength) {\n        nextScroll = scrollLength;\n      }\n\n      if (scroll === scrollLength && infinite) {\n        nextScroll = 0;\n      }\n    }\n\n    this.setState({ scroll: nextScroll });\n  };\n\n  render() {\n    let {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    let { scroll } = this.state;\n    const endScroll = scroll === itemWidth * (images.length - frameSize)\n    && !infinite;\n    const startScroll = scroll === 0 && !infinite;\n\n    const styleForItem = {\n      transform: `translate(-${scroll}px)`,\n      transition: `all ${animationDuration}ms`,\n    };\n\n    const styleForImage = {\n      width: `${itemWidth}px`,\n      transition: `all ${animationDuration}ms`,\n    };\n\n    const widthForView = {\n      width: itemWidth * frameSize,\n    };\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          style={widthForView}\n          className={classNames(\n            'Carousel__list',\n            {\n              'Carousel__list--left': startScroll,\n              'Carousel__list--right': endScroll,\n            },\n          )}\n        >\n          {images.map((image, index) => (\n            <li\n              key={image}\n              style={styleForItem}\n              className=\"Carousel__item\"\n            >\n              <img\n                style={styleForImage}\n                className=\"Carousel__image\"\n                src={image}\n                alt={`smilleâ„–${index + 1}`}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Button__container\">\n          <button\n            data-cy=\"prev\"\n            type=\"button\"\n            disabled={startScroll}\n            className=\"Button\"\n            onClick={this.handleButton(-step)}\n          >\n            Prev\n          </button>\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            disabled={endScroll}\n            className=\"Button\"\n            onClick={this.handleButton(step)}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = e.target;\n\n    this.setState(state => ({\n      ...state,\n      [id]: value,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n        <form className=\"Options\">\n          <label className=\"label\" htmlFor=\"itemWidth\">\n            Item width:\n            <input\n              type=\"number\"\n              className=\"input\"\n              value={itemWidth}\n              id=\"itemWidth\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"frameSize\">\n            Frame size:\n            <input\n              type=\"number\"\n              min={0}\n              max={images.length}\n              className=\"input\"\n              value={frameSize}\n              id=\"frameSize\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"step\">\n            Step:\n            <input\n              type=\"number\"\n              min={0}\n              max={images.length}\n              className=\"input\"\n              value={step}\n              id=\"step\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"animationDuration\">\n            Animation Duration:\n            <input\n              type=\"number\"\n              className=\"input\"\n              value={animationDuration}\n              id=\"animationDuration\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"infinite\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              className=\"input\"\n              id=\"infinite\"\n              checked={infinite}\n              onChange={() => {\n                this.setState({ infinite: !infinite });\n              }}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}