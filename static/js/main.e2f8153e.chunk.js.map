{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scroll","this","props","images","itemWidth","frameSize","step","animationDuration","infinite","scrollLength","length","styleForItem","width","transform","transition","widthForView","className","style","classNames","map","image","index","src","alt","type","disabled","onClick","setState","React","Component","App","withOfItem","rollingStep","animation","infiniteRolling","htmlFor","value","id","onChange","event","target","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2f8153e.chunk.js","sourcesContent":["/* eslint-disable prefer-const */\nimport classNames from 'classnames';\nimport React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n  step: number\n  frameSize: number\n  itemWidth: number\n  animationDuration: number\n  infinite: boolean\n};\n\ntype State = {\n  scroll: number;\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scroll: 0,\n  };\n\n  render() {\n    let {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    let { scroll } = this.state;\n    const scrollLength = (itemWidth / 2) * (images.length - frameSize);\n\n    if (frameSize > images.length) {\n      frameSize = images.length;\n    }\n\n    if (step > images.length) {\n      step = images.length;\n    }\n\n    if (scroll > scrollLength) {\n      scroll = scrollLength;\n    }\n\n    if (scroll < 0) {\n      scroll = 0;\n    }\n\n    const styleForItem = {\n      width: itemWidth,\n      transform: `translateX(-${scroll}px)`,\n      transition: `all ${animationDuration}ms`,\n    };\n    const widthForView = {\n      width: itemWidth * frameSize,\n    };\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          style={widthForView}\n          className={classNames(\n            'Carousel__list',\n            {\n              'Carousel__list--left': scroll === 0 && !infinite,\n              'Carousel__list--right': scroll === scrollLength && !infinite,\n            },\n          )}\n        >\n          {images.map((image, index) => (\n            <li\n              key={image}\n              style={styleForItem}\n              className=\"Carousel__item\"\n            >\n              <img\n                style={styleForItem}\n                className=\"Carousel__image\"\n                src={image}\n                alt={`smilleâ„–${index + 1}`}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Button__container\">\n          <button\n            data-cy=\"prev\"\n            type=\"button\"\n            disabled={scroll === 0 && infinite === false}\n            className=\"Button\"\n            onClick={() => {\n              if (scroll === 0) {\n                this.setState({ scroll: scrollLength });\n\n                return;\n              }\n\n              this.setState((state) => ({\n                scroll: state.scroll - ((itemWidth * step) / 2),\n              }));\n            }}\n          >\n            Prev\n          </button>\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            disabled={scroll === scrollLength && infinite === false}\n            className=\"Button\"\n            onClick={() => {\n              if (scroll === scrollLength) {\n                this.setState({ scroll: 0 });\n\n                return;\n              }\n\n              this.setState((state) => ({\n                scroll: state.scroll + ((itemWidth * step) / 2),\n              }));\n            }}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  withOfItem: number;\n  frameSize: number;\n  rollingStep: number;\n  animation: number;\n  infiniteRolling: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    withOfItem: 130,\n    frameSize: 3,\n    rollingStep: 3,\n    animation: 1000,\n    infiniteRolling: false,\n  };\n\n  render() {\n    const {\n      images,\n      withOfItem,\n      frameSize,\n      rollingStep,\n      animation,\n      infiniteRolling,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n        <form className=\"Options\">\n          <label className=\"label\" htmlFor=\"itemWidth\">\n            Item width:\n            <input\n              type=\"number\"\n              className=\"input\"\n              value={withOfItem}\n              id=\"itemWidth\"\n              onChange={(event) => {\n                this.setState({ withOfItem: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"frameSize\">\n            Frame size:\n            <input\n              type=\"number\"\n              min={0}\n              max={10}\n              className=\"input\"\n              value={frameSize}\n              id=\"frameSize\"\n              onChange={(event) => {\n                this.setState({ frameSize: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"step\">\n            Step:\n            <input\n              type=\"number\"\n              min={0}\n              max={10}\n              className=\"input\"\n              value={rollingStep}\n              id=\"step\"\n              onChange={(event) => {\n                this.setState({ rollingStep: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"animationDuration\">\n            Animation Duration:\n            <input\n              type=\"number\"\n              className=\"input\"\n              value={animation}\n              id=\"animationDuration\"\n              onChange={(event) => {\n                this.setState({ animation: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"label\" htmlFor=\"infinity\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              className=\"input\"\n              id=\"infinite\"\n              checked={infiniteRolling}\n              onChange={() => {\n                this.setState({ infiniteRolling: !infiniteRolling });\n              }}\n            />\n          </label>\n        </form>\n        <Carousel\n          images={images}\n          step={rollingStep}\n          frameSize={frameSize}\n          itemWidth={withOfItem}\n          animationDuration={animation}\n          infinite={infiniteRolling}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}